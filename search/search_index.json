{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Introduction","text":"<p>FELionGUI is a spectrum analysis application designed specifically for use with the FELion instrument at the FELIX labaratory (Dr. Sandra Br\u00fcnken group) , Radboud University in Nijmegen.</p> <p>The software is developed by A.N. Marimuthu. It provides a user-friendly interface for analyzing spectra obtained from the FELion instrument.</p>"},{"location":"index.html#download","title":"Download","text":"<p> fetching download links. Please wait... </p> <p><code>feliongui</code> is available for Windows, macOS, and Linux. You can download the installer for your operating system from the link below.</p> <p> Windows   macOS   Linux </p> <p>Optionally, you can download the <code>felionpy</code> python assets as shown below.</p> Download <code>felionpy</code> (optional) <p><code>felionpy</code> (python assets for <code>feliongui</code>) is required for running the application. The download will happen automatically when you run the application for the first time. So, make sure you have an active internet connection.</p>"},{"location":"index.html#download-optional","title":"Download  (optional)","text":"<p>If you want to download the <code>felionpy</code> assets manually, you can download it from the link below.</p> <ul> <li> Windows </li> <li> macOS </li> <li> Linux </li> </ul>"},{"location":"index.html#installation","title":"Installation","text":"<p>The installation is very simple. Just download the appropriate installer for your operating system and run it. The installer will guide you through the installation process.</p> <p>Follow the addition instruction below for your operating system.</p> windowsmacOSLinux <ul> <li>Download the installer (<code>.msi</code> file) from the link above.</li> <li>Run the installer.</li> <li>After the installation is complete, you can find the application in the <code>Start Menu</code> and <code>Desktop</code> icon.</li> </ul> Granting security exception <p>The application by default is blocked by Windows. So you need to grant an exception for a blocked app by clicking the More Info button in the Windows Security dialog box. Then click the Run Anyway button.</p> <ul> <li>Download the installer (<code>.dmg</code> file) from the link above.</li> <li>Drag the downloaded <code>.dmg</code> file to the <code>Desktop</code> folder.</li> </ul> Installing in a Application folder <p>Dragging the downloaded <code>.dmg</code> file to the <code>Applications</code> folder is not working.</p> Granting security exception <p>The application by default is blocked by macOS. So you need to grant an exception for a blocked app by clicking the Open Anyway button in Privacy &amp; Security settings. This button is available for about an hour after you try to open the app. To change which apps can open on your Mac, choose Apple menu   &gt; System Settings, click Privacy &amp; Security  in the sidebar, then go to Security. (You may need to scroll down.)</p> <p>The <code>.appimage</code> file is a portable application that can be run on any Linux distribution. However, you will need to make the file executable before running it. To do this, open a terminal and run the following command:</p> Make the file executable<pre><code>chmod +x feliongui_*_amd64.AppImage\n</code></pre>"},{"location":"index.html#home-screen","title":"Home Screen","text":"Fig 1: The feliongui v4 - Home Screen"},{"location":"about.html","title":"About","text":"<p>FELion GUI is a desktop application built using Tauri (v1.2) and Svelte (v3) as a front-end UI/UX and Python (v3.11) as a back-end for scientific computational purpose.</p>"},{"location":"about.html#back-end","title":"Back-end","text":""},{"location":"about.html#python","title":"Python","text":"<p>The computational processes in the FELion program are heavily depend on python, especially NumPy and Scipy libraries.</p> <p>Python is a popular programming language that is widely used in scientific computing. It is known for its simplicity, readability, and flexibility, making it a great choice for data analysis and numerical computations.</p> <p>Python has a large and active community of users and developers, which has led to the creation of many libraries and frameworks that facilitate scientific computing tasks.</p> <p>Two of the most commonly used libraries for scientific computing in Python are NumPy and SciPy. NumPy is a library for working with large, multi-dimensional arrays and matrices of numerical data, while SciPy is a library that provides a collection of algorithms and functions for scientific computing tasks, such as optimization, linear algebra, and statistics. Together, these libraries provide a powerful toolkit for scientific computing in Python.</p>"},{"location":"about.html#front-end","title":"Front-end","text":""},{"location":"about.html#tauri","title":"Tauri","text":"<p>Tauri is a framework for building lightweight, secure, and fast desktop applications using web technologies such as HTML , CSS , and JavaScript . It is designed to be easy to use and allow developers to build native-like applications that can be deployed on multiple platforms, including Windows, macOS, and Linux.</p> <p>One of the main features of Tauri is its ability to create applications that are both web-based and natively installed on the user's device. This allows developers to leverage the power and flexibility of the web while also providing a native experience for the end user.</p>"},{"location":"about.html#svelte","title":"Svelte","text":"<p>Svelte, on the other hand, is a JavaScript framework for building user interfaces that allows developers to write efficient and expressive code that compiles to small, standalone modules.</p> <p>By using Tauri and Svelte together, developers can create powerful and performant desktop applications that leverage the strengths of both technologies.</p>"},{"location":"about.html#plotlyjs","title":"Plotly.js","text":"<p>JavaScript Open Source Graphing Library</p>"},{"location":"about.html#smui","title":"SMUI","text":"<p>Material UI components for Svelte apps</p>"},{"location":"about.html#google-fonts","title":"Google fonts","text":"<p>Material Symbols and fonts</p>"},{"location":"about.html#bulma","title":"Bulma","text":"<p>the modern CSS framework that just works</p>"},{"location":"about.html#lodash","title":"Lodash","text":"<p>A modern JavaScript utility library delivering modularity, performance &amp; extras</p>"},{"location":"about.html#lordicons","title":"Lordicons","text":"<p>Animated icons by Lordicon.com</p>"},{"location":"about.html#animatecss","title":"Animate.css","text":"<p>Just-add-water CSS animations</p>"},{"location":"about.html#hovercss","title":"Hover.css","text":"<p>A collection of CSS3 powered hover effects</p>"},{"location":"about.html#cooltipzcss","title":"Cooltipz.css","text":"<p>Cool customisable tooltips made from pure CSS</p>"},{"location":"layout.html","title":"Layout","text":""},{"location":"layout.html#general","title":"General","text":"<p>The general page layout for Normline, Masspec, Timescan and THz are very similar such as to browse to the required location and select corresponding files types in <code>file-browser</code>.</p> <p> </p> Fig 2: The general page layout"},{"location":"layout.html#file-browser","title":"File browser","text":"<p>As shown in Fig 2, the general layout with a <code>file-browser</code> column on the left and a <code>main-container</code> on the right typically consists of a split-screen interface. The <code>file-browser</code> column is typically a vertical column that takes up a portion of the left side of the screen. It displays a hierarchical tree structure of the files and directories on the computer or device, allowing the user to navigate through the file system and locate specific files.</p> <p>The icons as shown in top-row of <code>file-browser</code> describes the following:</p> Icons Description navigate back update and reload files in current location sort files by name select all files search to filter files File types <p>The <code>file-browser</code> only shows <code>file-types</code> corresponding to the current page and not all files available in the current location.</p>"},{"location":"layout.html#file-types","title":"File types","text":"<p>Each page may use its own specific file types, and this information is provided in the following table.</p> <code>file-type</code> (i.e., file extension) Description Page *.felix FELIX IR-data Normline *.ofelix OPO IR-data Normline *.mass Masspectrum data Masspec *.scan Timescan data Timescan *.thz THz data THz"},{"location":"layout.html#main-container","title":"Main container","text":"<p>The <code>main-container</code> on the right takes up the remainder of the screen. The top row called <code>widget-row</code> consists of <code>icon-buttons</code> with function as described below:</p> <code>icon-buttons</code> Description Full screen i.e., shows only plotted graphs Fix the plotted graph width to the available scrren width  and  toggle the visibility of labelled column from displaying pop-up modal with special elements which depends on selected page <p>After the <code>icon-buttons</code> row, the next immediate row usually display additional information such as the location address, which shows the path to the current directory, and browse location buttons, which allow the user to navigate to different parts of the file system. This row is followed by additional row(s) depends on current active page. This entire collection of top row is referred as <code>initial-button-rows</code>.</p> <p>Following <code>initial-button-rows</code>, the rest of the space of the  <code>main-container</code> include a display area for the selected file, controls for interacting with the plotted file data, and output areas for displaying the results of the processing or post-processing graph plots.</p>"},{"location":"masspec.html","title":"Masspec","text":"<p>Masspec is used to analyze mass spectra obtained from the FELion instrument.</p> file format <p>The mass spectra are saved in the <code>.mass</code> file format.</p> <p>So just select the <code>.mass</code> file and it automatically loads the spectrum.</p> <p> </p> Fig 6: Mass spectrum of two selected file"},{"location":"masspec.html#labview-settings","title":"Labview Settings","text":"<p>The <code>GetLabviewSettings</code> button is used to get the settings from the Labview software. The settings are saved in the <code>.mass</code> file in itself at the end.</p> <p> </p> Fig 7: Labview settings for the selected file"},{"location":"masspec.html#production-quality-plots","title":"Production-quality plots","text":"<p>The <code>Open in matplotlib</code> button is used to plot the mass spectrum in <code>matplotlib</code> and save it in a high-resolution image file.</p> <p> </p> Fig 8: High quality masspec figure <p> </p> Fig 9: Figure controller"},{"location":"misc.html","title":"Misc","text":"<p>We can link to that heading from another page too.</p> <p>This works the same as a normal link to that heading.</p> <p>Link image</p>"},{"location":"misc.html#mermaid-graph-demo","title":"Mermaid graph demo","text":"<pre><code>graph TD\n  A --&gt; B --&gt; C</code></pre> <pre><code>graph LR\n    hello[\"&lt;b&gt;Hello&lt;/b&gt;\"] --&gt; world[\"&lt;big&gt;&lt;i&gt;World&lt;/i&gt;&lt;/big&gt;\"]\n    world --&gt; mermaid[mermaid web site]</code></pre> <pre><code>graph TD\nA[Client] --&gt; B[Load Balancer]\nB --&gt; C[Server01]\nB --&gt; D[Server02]</code></pre> <pre><code>graph TD;\n  A--&gt;B;\n  A--&gt;C;\n  B--&gt;D;\n  C--&gt;D;\n  D--&gt;A;</code></pre> <pre><code>sequenceDiagram\n  participant Alice\n  participant Bob\n  Alice-&gt;&gt;John: Hello John, how are you?\n  loop Healthcheck\n      John-&gt;&gt;John: Fight against hypochondria\n  end\n  Note right of John: Rational thoughts &lt;br/&gt;prevail!\n  John--&gt;&gt;Alice: Great!\n  John-&gt;&gt;Bob: How about you?\n  Bob--&gt;&gt;John: Jolly good!</code></pre>"},{"location":"normline.html","title":"Normline","text":"<p>Normline is the page where analysis of FELIX and OPO infrared data are processed such as baseline correction, wavelength and power calibration In addition, one can do post-processing such as Gaussian and Multi-Gaussian line profile fitting fitting of experimental data to derive line parameters (FWHM, \\(\\sigma\\) and amplitude).</p> <p>Before proceeding further, let us familirise with different data folder structure and processed and post-processed data types for FELIX and OPO IR data.</p>"},{"location":"normline.html#folder-structure","title":"Folder structure","text":"<pre><code>graph TD\n    Parent[parent-folder]\n\n    Parent --&gt; DATA\n    Parent --&gt; EXPORT\n    Parent --&gt; OUT\n\n    DATA --&gt; felix[.*felix]\n    DATA --&gt; .pow\n    DATA --&gt; .base\n\n    EXPORT --&gt; .dat\n\n    OUT --&gt; .expfit\n    OUT --&gt; .fullfit\n    OUT --&gt; other[.png, .pdf, etc]\n</code></pre> file types <p>.*felix indicates any of the following: .felix, .ofelix, .cfelix or .cofelix file</p>"},{"location":"normline.html#data-types","title":"Data types","text":"Name Description Data source FELIX .felix FELIX IR data Instrument (Labview) .cfelix corrected felix created manually (FELionGUI) .pow powerfile for felix created manually (FELionGUI) .base baseline for felix created manually (FELionGUI) OPO .ofelix OPO IR data Instrument (Labview) .cbase baseline for OPO created manually (FELionGUI) .cofelix corrected ofelix created manually (FELionGUI) Post-processed .dat processed .*felix data created manually (FELionGUI) .expfit Gaussian fit parameters created manually (FELionGUI) .fullfit Multi-Gaussian fit parameters created manually (FELionGUI)"},{"location":"normline.html#step-by-step-procedure","title":"Step-by-step procedure","text":""},{"location":"normline.html#create-baseline","title":"Create baseline","text":"<p>Creating baseline for felix or opo IR spectrum</p> <p>The procedure of processing the data are as given below in flowchart:</p> <pre><code>graph LR\n  baseline[Create baseline] --&gt; data[FELIX or OPO plot] --&gt; post[Post processing]</code></pre> <p>As shown in above flowchart, the first step is to create a baseline</p> Initial steps <p>The measured .*felix file is copied into a folder (called parent folder as mentioned in above flowchart) followed by baseline creation <code>Create baseline</code>. If the parent folder is empty the following directories <code>DATA</code>, <code>EXPORT</code> and <code>OUT</code> are automatically generated and the copied .felix or .ofelix files are copied into the <code>DATA</code> folder.</p> <p> </p> Fig 3: Normline: Main functions (in default mode, i.e., FELIX mode) Baseline file selection <p>Normally files are selected by mouse <code>left-click</code>. However, to select a file for creating baseline one has to do <code>ctrl</code> + <code>left-click</code>. As shown in Fig 3, selected files are indicated by  and the selected file for baseline correction has a solid orange coloured border.</p> Baseline creation <p>If the <code>parent-folder</code> is empty and this is the first time you are processing the file, then after baseline creation you should refresh () and move into <code>DATA</code> folder.</p> <p> </p> Fig 4: Baseline creation Baseline adjustment <p>As shown in Fig 4, the red coloured line is th measured FELIX data. While the blue coloured line corresponds to baseline which can be adjusted by dragging the solid-squared-blue-box.</p> <p>The baseline is basicallya cubic spline extraploation w.r.t solid-squared-blue-box. The solid-squared-blue-box  can be added or deleted, and the measured data (red coloured) can also be deleted and saved as a corrected felix file (.cfelix).</p> <p>The addition and deletion can be applied when mouse is hovered over the region of interest followed by keyboard keys as shown in Table below.</p> keys description <code>a</code> add solid-squared-blue-box point <code>d</code> delete solid-squared-blue-box point <code>x</code> delete measured-data point <code>z</code> undo deleted measured-data point <code>r</code> redo deleted measured-data point"},{"location":"normline.html#felix","title":"FELIX","text":""},{"location":"normline.html#powerfile","title":"Powerfile","text":"<p>Create powerfile (.pow) for corresponding (.felix) file</p> Powerfile saving <p>Don't leave an empty line at the end of the powerfile. It might cause an error.</p> <p> </p> Fig 4: Powerfile creation"},{"location":"normline.html#felix-plot","title":"FELIX plot","text":"<pre><code>graph LR\n  baseline[Create baseline] --&gt; powerfile --&gt; felix[FELIX plot] --&gt; post-process</code></pre> <p>As shown above, once baseline is created click on <code>FELIX plot</code> button to analysis FELIX IR data (from .felix file).</p> <p> </p> Fig 5: FELIX plot analysis (top to bottom : baseline corrected, power and wavelength calibrated, and final normalised data )"},{"location":"normline.html#opo","title":"OPO","text":"<pre><code>graph LR\n  opomode[OPO MODE] --&gt; baseline[Create baseline] --&gt; opo[OPO plot] --&gt; post-process</code></pre>"},{"location":"settings.html","title":"Settings","text":""},{"location":"thz.html","title":"THz","text":""},{"location":"timescan.html","title":"Timescan","text":""},{"location":"kinetics/timescan.html","title":"Timescan","text":"Fig 7: Timescan kinetics homepage <p>The kinetics page is used to analyze the kinetics of the FELion experiment. The kinetics page is divided into three panels.</p>"},{"location":"kinetics/timescan.html#making-a-new-kinetics-project","title":"Making a new kinetics project","text":"Number densityLabelsChannels <p> Fig 8.1.0: Kinetics: Number density </p> <p> Fig 8.1.1: Compute number density  </p> <p> Fig 8.1.2: Compute number density  </p> <p> Fig 8.2.1: Kinetics: Labels with default molecular ion (CD+) name and tag (helium) </p> <p> Fig 8.2.2: Kinetics: Labels for N+ ion with He tag </p> <p> Fig 8.3.1: Kinetics: Channels </p> <p> Fig 8.3.2: Kinetics: Channels </p> Note <ul> <li> indicates the data is not yet loaded.</li> <li> indicates the data is loaded.</li> </ul>"},{"location":"kinetics/timescan.html#rate-of-equation","title":"Rate of equation","text":"Defining the rate equationFitting rate equations <p> Fig 9.1: Kinetic code: computing sliders </p> <p> Fig 9.2: Kinetic code: Full model equations </p> <p> Fig 10.1: Kinetic code: Fitting rate equations </p> <p> Fig 10.1: Kinetic code: Fitting rate equations </p>"},{"location":"kinetics/timescan.html#kinetics-plots","title":"Kinetics plots","text":"Fig 11: Kinetic plots creating window"},{"location":"kinetics/timescan.html#flowchart","title":"Flowchart","text":"<pre><code>graph TD\n    Kinetics\n\n    Kinetics --&gt; processing\n    Kinetics --&gt; Post[post-processing]\n\n    processing --&gt; ND[Number density]\n    processing --&gt; Parameters\n    processing --&gt; Channels\n    processing --&gt; Code[Compute code]\n\n    ND --&gt; Table[Config Table] --&gt; *.configs.json\n    Parameters --&gt; *.params.json\n    Parameters --&gt; *.fit.json\n    Channels --&gt; *.channels.json\n    Code --&gt; Fit[Fit and save] --&gt; *.fit.json\n\n    Post --&gt; Plots\n\n    Plots --&gt; *.processed.json\n    Plots --&gt; *.params.processed.json\n\n    *.processed.json --&gt; *.rateConstants.processed.json[*.rateConstants.processed.json or *.rateConstants.fitted.json]\n    *.params.processed.json --&gt; *.rateConstants.processed.json[*.rateConstants.processed.json or *.rateConstants.fitted.json]</code></pre>"}]}